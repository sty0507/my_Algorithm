# 내 코드
import math
def solution(n):
    answer = 0
    for i in range(2, n+1):
        flag = False
        for j in range(2, int(math.sqrt(i)) + 1):
            if i % j == 0:
                flag = True
                break
        if(not flag):
            answer += 1
    return answer
# 예를 들면 100이면 1부터 100까지 중에 약수가 되는 수를 찾아야하는 것인데, 그러면 너무 시간이 오래 걸린다.
# 약수는 대응을 한다. 100의 약수 50이면 이에 대응하는 또 다른 약수는 2가 있다. 이런 특성을 사용하기 위해 100이라는 수에 루트를 씌운 것(제곱근을 구한것)이다.
# 그리고 약수가 있다는 것을 확인해서 나오는 flag 변수를 선언을 해줬다.

# 다른 사람 코드 (에라토스테네스의 체)
def solution(n):
    num=set(range(2,n+1))

    for i in range(2,n+1):
        if i in num:
            num-=set(range(2*i,n+1,i))
    return len(num)
# 에라토스테네스의 체를 사용해서 푼 코드이다.
# 에라토스테네스의 체는 간단하게 소수의 가장 같은 수부터 본인을 제외한 배수들을 지워 나가면서 소수를 찾는 방벙이다.
"""
예로 10이면 일단 수를 나열을 한다.
1 2 3 4 5 6 7 8 9 10
일단 1은 지운다
2 3 4 5 6 7 8 9 10
그리고 2를 제외한 배수들을 지운다
2 3 5 7 9
그리고 다음 소수인 3을 제외한 배수들을 지운다
2 3 5 7
이러면 2 3 5 7로 소수 4개가 추려진다.
수가 커지면 다음은 5를 제외한 배수, 7를 제외한 배수, 11을 제외한 배수 등등 가면 된다.
"""
# 이제 코드를 보면 에라토스테네스의 체를 제대로 사용하고 있다. 집합을 이용해서 배수들을 만든 다음에 그것을 처음에 생성한 집합 num에서 빼도록, 차집합을 시켜서 값을 구하고 있다.